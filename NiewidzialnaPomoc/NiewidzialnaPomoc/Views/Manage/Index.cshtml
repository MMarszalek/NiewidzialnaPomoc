@using PagedList;
@using PagedList.Mvc;
@model Repository.Models.Views.ManageViewModel

@{
    ViewBag.Title = "Profil użytkownika";
}

<h2>@ViewBag.Title.</h2>

<div id="tabs">
    <ul class="nav nav-tabs">
        <li><a href="#Profile">Mój profil</a></li>
        <li><a href="#PersonalAdvertisements">Moje ogłoszenia</a></li>
        <li><a href="#RewardedAdvertisements">Moja pomoc</a></li>
        <li><a href="#RewardCodes">Moje nagrody</a></li>
    </ul>
    @Html.Raw(TempData["code"])
    @Html.Raw(TempData["alert"])
    <div id="Profile">
        <br />
        @using (Html.BeginForm("Index","Manage", FormMethod.Post, new { enctype = "multipart/form-data" }))
        {
            @Html.AntiForgeryToken()

            <div class="form-horizontal">
                @Html.ValidationSummary(true, "", new { @class = "text-danger" })
                @Html.HiddenFor(model => model.ApplicationUser.Id)

                @if (Model.ApplicationUser.Avatar != null)
                {
                    <div class="form-group">
                        <span class="control-label col-md-2"><strong>Zdjęcie profilowe</strong></span>
                        <div class="col-md-10">
                            <img src="~/Avatar?id=@Model.ApplicationUser.Avatar.Id" alt="avatar" />
                        </div>
                    </div>
                }

                <div class="form-group">
                    @Html.Label("Nowe zdjęcie profilowe", new { @class = "control-label col-md-2" })
                    <div class="col-md-10">
                        <input type="file" name="upload" />
                    </div>
                </div>

                <div class="form-group">
                    @Html.LabelFor(model => model.ApplicationUser.Email, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-10">
                        @Html.EditorFor(model => model.ApplicationUser.Email, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.ApplicationUser.Email, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-group">
                    @Html.LabelFor(model => model.ApplicationUser.PhoneNumber, "Numer telefonu", htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-10">
                        @Html.EditorFor(model => model.ApplicationUser.PhoneNumber, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.ApplicationUser.PhoneNumber, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-group">
                    @Html.LabelFor(model => model.ApplicationUser.FirstName, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-10">
                        @Html.EditorFor(model => model.ApplicationUser.FirstName, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.ApplicationUser.FirstName, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-group">
                    @Html.LabelFor(model => model.ApplicationUser.LastName, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-10">
                        @Html.EditorFor(model => model.ApplicationUser.LastName, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.ApplicationUser.LastName, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-group">
                    <div class="col-md-offset-2 col-md-10">
                        <input type="submit" value="Zapisz" class="btn btn-default" />
                    </div>
                </div>
            </div>
        }

        <div>
            @Html.ActionLink("Zmień hasło", "ChangePassword")
        </div>
    </div>
    <div id="PersonalAdvertisements">
        <br />
        <div id="sorting-container">
            <p>
                Sortowanie: @Html.ActionLink(Html.DisplayNameFor(model => model.PersonalAdvertisements.FirstOrDefault().Location.Name).ToHtmlString(), "Index", new { sortOrderPA = ViewBag.LocationSortParmPA }) |
                @Html.ActionLink(Html.DisplayNameFor(model => model.PersonalAdvertisements.FirstOrDefault().Title).ToHtmlString(), "Index", new { sortOrderPA = ViewBag.TitleSortParmPA }) |
                @Html.ActionLink(Html.DisplayNameFor(model => model.PersonalAdvertisements.FirstOrDefault().AddDate).ToHtmlString(), "Index", new { sortOrderPA = ViewBag.AddDateSortParmPA }) |
                @Html.ActionLink(Html.DisplayNameFor(model => model.PersonalAdvertisements.FirstOrDefault().Difficulty.Name).ToHtmlString(), "Index", new { sortOrderPA = ViewBag.DifficultySortParmPA })
            </p>
        </div>
        <br />
        <table class="table">
            @foreach (var item in Model.PersonalAdvertisements)
            {
                <tr class="clickable-row">
                    <td onclick="location.href = '@(Url.Action("DetailsPA", "Manage", new { id = item.Id }))'">
                        <div class="col-md-3">
                            @if (item.AdvertisementPhotos.Any())
                            {
                                <img src="~/AdvertisementPhoto?id=@item.AdvertisementPhotos.FirstOrDefault().Id&thumbnail=true" alt="photo" />
                            }
                            else
                            {
                                <img src="~/AdvertisementPhoto?id=1&thumbnail=true" alt="photo" />
                            }
                        </div>
                        <div class="col-md-9">
                            <h4>@Html.DisplayFor(modelItem => item.Title)</h4>
                            <h5>@Html.DisplayFor(modelItem => item.Location.Name)</h5>
                            <h6>Data dodania: @Html.DisplayFor(modelItem => item.AddDate)</h6>
                            <h6>Trudność: @Html.DisplayFor(modelItem => item.Difficulty.Name)</h6>
                        </div>
                    </td>
                    <td>
                        @Html.ActionLink("Edytuj", "EditPA", new { id = item.Id }) |
                        @Html.ActionLink("Usuń", "Index", new { selectedAdvertisementToDelete = item.Id },
                       new { onclick = "return confirm('Czy na pewno chcesz usunąć to ogłoszenie?')" }) |
                        @Html.ActionLink("Zatwierdź", "AcceptPA", new { id = item.Id })
                    </td>
                </tr>
            }

        </table>
        <br />
        Strona @(Model.PersonalAdvertisements.PageCount < Model.PersonalAdvertisements.PageNumber ? 0 : Model.PersonalAdvertisements.PageNumber) z @Model.PersonalAdvertisements.PageCount
        @Html.PagedListPager(Model.PersonalAdvertisements, pagePA => Url.Action("Index", new { pagePA, sortOrderPA = ViewBag.CurrentSortPA }))

        @*<table class="table">
            <tr>
                <th>
                    @Html.ActionLink(Html.DisplayNameFor(model => model.PersonalAdvertisements.FirstOrDefault().Location.Name).ToHtmlString(), "Index", new { sortOrderPA = ViewBag.LocationSortParmPA })
                </th>
                <th>
                    @Html.ActionLink(Html.DisplayNameFor(model => model.PersonalAdvertisements.FirstOrDefault().Title).ToHtmlString(), "Index", new { sortOrderPA = ViewBag.TitleSortParmPA })
                </th>
                <th>
                    @Html.ActionLink(Html.DisplayNameFor(model => model.PersonalAdvertisements.FirstOrDefault().AddDate).ToHtmlString(), "Index", new { sortOrderPA = ViewBag.AddDateSortParmPA })
                </th>
                <th>
                    @Html.ActionLink(Html.DisplayNameFor(model => model.PersonalAdvertisements.FirstOrDefault().Difficulty.Name).ToHtmlString(), "Index", new { sortOrderPA = ViewBag.DifficultySortParmPA })
                </th>
            </tr>

            @foreach (var item in Model.PersonalAdvertisements)
            {
                <tr class="clickable-row">
                    <td onclick="location.href = '@(Url.Action("DetailsPA", "Manage", new { id = item.Id }))'">
                        @Html.DisplayFor(modelItem => item.Location.Name)
                    </td>
                    <td onclick="location.href = '@(Url.Action("DetailsPA", "Manage", new { id = item.Id }))'">
                        @Html.DisplayFor(modelItem => item.Title)
                    </td>
                    <td onclick="location.href = '@(Url.Action("DetailsPA", "Manage", new { id = item.Id }))'">
                        @Html.DisplayFor(modelItem => item.AddDate)
                    </td>
                    <td onclick="location.href = '@(Url.Action("DetailsPA", "Manage", new { id = item.Id }))'">
                        @Html.DisplayFor(modelItem => item.Difficulty.Name)
                    </td>
                    <td>
                        @Html.ActionLink("Edit", "EditPA", new { id = item.Id }) |
                        @Html.ActionLink("Details", "DetailsPA", new { id = item.Id }) |
                        @Html.ActionLink("Delete", "Index", new { selectedAdvertisementToDelete = item.Id }, 
                       new { onclick = "return confirm('Czy na pewno chcesz usunąć to ogłoszenie?')" }) |
                        @Html.ActionLink("Accept", "AcceptPA", new { id = item.Id })
                    </td>
                </tr>
            }

        </table>
        <br />
        Page @(Model.PersonalAdvertisements.PageCount < Model.PersonalAdvertisements.PageNumber ? 0 : Model.PersonalAdvertisements.PageNumber) of @Model.PersonalAdvertisements.PageCount
        @Html.PagedListPager(Model.PersonalAdvertisements, pagePA => Url.Action("Index", new { pagePA, sortOrderPA = ViewBag.CurrentSortPA }))*@
    </div>
    <div id="RewardedAdvertisements">
        <br />
        <div id="sorting-container">
            <p>
                Sortowanie: @Html.ActionLink(Html.DisplayNameFor(model => model.RewardedAdvertisements.FirstOrDefault().Location.Name).ToHtmlString(), "Index", new { sortOrderRA = ViewBag.LocationSortParmRA }) |
                @Html.ActionLink(Html.DisplayNameFor(model => model.RewardedAdvertisements.FirstOrDefault().Title).ToHtmlString(), "Index", new { sortOrderRA = ViewBag.TitleSortParmRA }) |
                @Html.ActionLink(Html.DisplayNameFor(model => model.RewardedAdvertisements.FirstOrDefault().AddDate).ToHtmlString(), "Index", new { sortOrderRA = ViewBag.AddDateSortParmRA }) |
                @Html.ActionLink(Html.DisplayNameFor(model => model.RewardedAdvertisements.FirstOrDefault().Difficulty.Name).ToHtmlString(), "Index", new { sortOrderRA = ViewBag.DifficultySortParmRA })
            </p>
        </div>
        <br />
        <table class="table">
            @foreach (var item in Model.RewardedAdvertisements)
            {
                <tr class="clickable-row">
                    <td onclick="location.href = '@(Url.Action("DetailsRA", "Manage", new { id = item.Id }))'">
                        <div class="col-md-3">
                            @if (item.AdvertisementPhotos.Any())
                            {
                                <img src="~/AdvertisementPhoto?id=@item.AdvertisementPhotos.FirstOrDefault().Id&thumbnail=true" alt="photo" />
                            }
                            else
                            {
                                <img src="~/AdvertisementPhoto?id=1&thumbnail=true" alt="photo" />
                            }
                        </div>
                        <div class="col-md-9">
                            <h4>@Html.DisplayFor(modelItem => item.Title)</h4>
                            <h5>@Html.DisplayFor(modelItem => item.Location.Name)</h5>
                            <h6>Data dodania: @Html.DisplayFor(modelItem => item.AddDate)</h6>
                            <h6>Trudność: @Html.DisplayFor(modelItem => item.Difficulty.Name)</h6>
                        </div>
                    </td>
                </tr>
            }
        </table>
        <br />
        Strona @(Model.RewardedAdvertisements.PageCount < Model.RewardedAdvertisements.PageNumber ? 0 : Model.RewardedAdvertisements.PageNumber) z @Model.RewardedAdvertisements.PageCount
        @Html.PagedListPager(Model.RewardedAdvertisements, pageRA => Url.Action("Index", new { pageRA, sortOrderRA = ViewBag.CurrentSortRA }))

        @*<table class="table">
            <tr>
                <th>
                    @Html.ActionLink(Html.DisplayNameFor(model => model.RewardedAdvertisements.FirstOrDefault().Location.Name).ToHtmlString(), "Index", new { sortOrderRA = ViewBag.LocationSortParmRA })
                </th>
                <th>
                    @Html.ActionLink(Html.DisplayNameFor(model => model.RewardedAdvertisements.FirstOrDefault().Title).ToHtmlString(), "Index", new { sortOrderRA = ViewBag.TitleSortParmRA })
                </th>
                <th>
                    @Html.ActionLink(Html.DisplayNameFor(model => model.RewardedAdvertisements.FirstOrDefault().AddDate).ToHtmlString(), "Index", new { sortOrderRA = ViewBag.AddDateSortParmRA })
                </th>
                <th>
                    @Html.ActionLink(Html.DisplayNameFor(model => model.RewardedAdvertisements.FirstOrDefault().Difficulty.Name).ToHtmlString(), "Index", new { sortOrderRA = ViewBag.DifficultySortParmRA })
                </th>
            </tr>

            @foreach (var item in Model.RewardedAdvertisements)
            {
                <tr class="clickable-row" onclick="location.href = '@(Url.Action("DetailsPA", "Manage", new { id = item.Id }))'">
                    <td>
                        @Html.DisplayFor(modelItem => item.Location.Name)
                    </td>
                    <td>
                        @Html.DisplayFor(modelItem => item.Title)
                    </td>
                    <td>
                        @Html.DisplayFor(modelItem => item.AddDate)
                    </td>
                    <td>
                        @Html.DisplayFor(modelItem => item.Difficulty.Name)
                    </td>
                    <td>
                        @Html.ActionLink("Details", "DetailsRA", new { id = item.Id })
                    </td>
                </tr>
            }

        </table>
        <br />
        Page @(Model.RewardedAdvertisements.PageCount < Model.RewardedAdvertisements.PageNumber ? 0 : Model.RewardedAdvertisements.PageNumber) of @Model.RewardedAdvertisements.PageCount
        @Html.PagedListPager(Model.RewardedAdvertisements, pageRA => Url.Action("Index", new { pageRA, sortOrderRA = ViewBag.CurrentSortRA }))*@
    </div>
    <div id="RewardCodes">
        <br />
        <div id="sorting-container">
            <p>
                Sortowanie: @Html.ActionLink(Html.DisplayNameFor(model => model.RewardCodes.FirstOrDefault().ReceivedDate).ToHtmlString(), "Index", new { sortOrderRC = ViewBag.ReceivedDateSortParmRC }) |
                @Html.ActionLink(Html.DisplayNameFor(model => model.RewardCodes.FirstOrDefault().Reward.Name).ToHtmlString(), "Index", new { sortOrderRC = ViewBag.RewardNameSortParmRC })
            </p>
        </div>
        <br />
        <table class="table">
            @foreach (var item in Model.RewardCodes)
            {
                <tr class="clickable-row">
                    <td onclick="location.href = '@(Url.Action("Index", "Manage", new { isRewardSelected = true, selectedReward = item.Id }))'">
                        <div class="col-md-6">
                            <img src="~/RewardPhoto?id=@item.Reward.RewardPhoto.Id" alt="photo" />
                        </div>
                        <div class="col-md-6">
                            <h4>@Html.DisplayFor(modelItem => item.Reward.Name)</h4>
                            <h6>Data otrzymania: @Html.DisplayFor(modelItem => item.ReceivedDate)</h6>
                        </div>
                    </td>
                </tr>
            }
        </table>
        <br />
        Strona @(Model.RewardCodes.PageCount < Model.RewardCodes.PageNumber ? 0 : Model.RewardCodes.PageNumber) z @Model.RewardCodes.PageCount
        @Html.PagedListPager(Model.RewardCodes, pageRC => Url.Action("Index", new { pageRC, sortOrderRC = ViewBag.CurrentSortRC }))

        @*<table class="table">
            <tr>
                <th>
                    @Html.ActionLink(Html.DisplayNameFor(model => model.RewardCodes.FirstOrDefault().ReceivedDate).ToHtmlString(), "Index", new { sortOrderRC = ViewBag.ReceivedDateSortParmRC })
                </th>
                <th>
                    @Html.ActionLink(Html.DisplayNameFor(model => model.RewardCodes.FirstOrDefault().Reward.Name).ToHtmlString(), "Index", new { sortOrderRC = ViewBag.RewardNameSortParmRC })
                </th>
            </tr>

            @foreach (var item in Model.RewardCodes)
            {
                <tr class="clickable-row" onclick="location.href = '@(Url.Action("Index", "Manage", new { isRewardSelected = true, selectedReward = item.Id }))'">
                    <td>
                        @Html.DisplayFor(modelItem => item.ReceivedDate)
                    </td>
                    <td>
                        @Html.DisplayFor(modelItem => item.Reward.Name)
                    </td>
                </tr>
            }

        </table>
        <br />
        Page @(Model.RewardCodes.PageCount < Model.RewardCodes.PageNumber ? 0 : Model.RewardCodes.PageNumber) of @Model.RewardCodes.PageCount
        @Html.PagedListPager(Model.RewardCodes, pageRC => Url.Action("Index", new { pageRC, sortOrderRC = ViewBag.CurrentSortRC }))*@
    </div>
</div>

<script>
    $(function () {
        //$("#tabs").tabs();
        var index = 'qpsstats-active-tab';
        var dataStore = window.sessionStorage;
        var oldIndex = 0;
        try {
            oldIndex = dataStore.getItem(index);
        } catch (e) { }

        $("#tabs").tabs({
            active: oldIndex,
            activate: function (event, ui) {
                var newIndex = ui.newTab.parent().children().index(ui.newTab);
                try {
                    dataStore.setItem(index, newIndex);
                } catch (e) { }
            }
        });
    });
</script>